#!/usr/bin/env python3

import os
import sys
import importlib

import dotenv

import lib.image_utils
import lib.preconfigurators


def generate_result_image(image_proj_dir, image_config, image_config_dir):
    result_image_path = f"{image_proj_dir}/{image_config['IMAGE_NAME']}"

    lib.image_utils.generate_empty_image(
        result_image_path, image_config["BLOCK_SIZE"], image_config["IMAGE_BLOCKS"]
    )

    fdisk_layout_path =  f"{image_config_dir}/{lib.preconfigurators.FDISK_LAYOUT_FILENAME}"

    lib.image_utils.create_partition_table(
        result_image_path, fdisk_layout_path
    )

    return result_image_path


def check_required_dirs(*required_dirs):
    for required_dir in required_dirs:
        if not os.path.isdir(required_dir):
            raise TypeError(f"{required_dir=} isn't found please run forge_prepare firstly")


def forge(result_image_path, image_config, image_partition_data_dir):
    for partition_name in os.listdir(image_partition_data_dir):
        partition_dir = f"{image_partition_data_dir}/{partition_name}"
        partition_image_path = f"{partition_dir}/{partition_name}.image"

        partition_dir_subfolders = os.listdir(partition_dir)
        if len(partition_dir_subfolders) != 1:
            raise TypeError(
                f"Error processing {partition_name=} it should contain {partition_name}.image"
                " or directory named as filesystem you want to pack it in"
            )

        if not os.path.exists(partition_image_path):
            target_fs = partition_dir_subfolders[0]

            fs_generator = importlib.import_module(f"fs_generators.{target_fs}")
            fs_generator.pack(
                partition_dir,
                image_config["BLOCK_SIZE"],
                image_config[f"{partition_name.upper()}_SECTORS"]
            )

        if os.path.exists(partition_image_path):
            partition_size = int(image_config["BLOCK_SIZE"]) * int(image_config[f"{partition_name.upper()}_SECTORS"])
            partition_image_size = os.path.getsize(partition_image_path)

            if partition_image_size > partition_size:
                raise TypeError(
                    f"Error: {partition_image_path=} to big {partition_image_size=} > {partition_size=}"
                )

            lib.image_utils.write_image_to_image(
                partition_image_path, result_image_path,
                image_config["BLOCK_SIZE"],
                image_config[f"{partition_name.upper()}_START"]
            )
        else:
            raise TypeError(
                f"Error: {partition_image_path=} not found and not flashed"
            )

    print(f"Forged! Image available in {result_image_path}")


def main(image_proj_dir: str):
    image_proj_dir = image_proj_dir.rstrip("/")
    image_config_dir = f"{image_proj_dir}/{lib.preconfigurators.PRECONFIG_CONFIG_DIR}"
    image_partition_data_dir = f"{image_proj_dir}/{lib.preconfigurators.PRECONFIG_PRATITIONS_DATA_DIR}"

    check_required_dirs(image_config_dir, image_partition_data_dir)

    image_config = dotenv.dotenv_values(f"{image_config_dir}/{lib.preconfigurators.ENV_CONFIG_FILENAME}")
    result_image_path = generate_result_image(image_proj_dir, image_config, image_config_dir)

    forge(result_image_path, image_config, image_partition_data_dir)


if __name__ == "__main__":
    main(*sys.argv[1:])
